data <- page %>%
html_elements(".car-info :nth-child(1)") %>%
html_text2()
data <- str_remove_all(data, "\\d{4}")
all_colors[[i]] <- data
}
colors <- unlist(all_colors)
#--------------------------------------------------------------------------------
# Put it all in a data frame
car_df <- tibble(
price = prices,
brands = brands,
mileages = mileages,
colors = colors
)
all_prices <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".results") %>%
html_text2()
all_prices[[i]] <- data
}
# Notice that each element of this list contains two additional elements
# ("Monthly payment: $" and $"$), which we want to remove.
all_prices <- lapply(all_prices, function(x) x[grepl("^\\$\\d{1,3},\\d{3}$", x)])
prices <- unlist(all_prices)
prices
prices <-
str_remove_all(prices, "[^0-9]") |>  # Remove non-numeric characters
as.integer()
prices
car_df
# This is how you get read the HTML into R
url <- "https://www.honeycarsmart.com/index.php/full-inventory"
html <- read_html(url)
#number of pages to scrape
num_pages <- 20
#-------------------------------------------------------------------------------
all_prices <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".results") %>%
html_text2()
all_prices[[i]] <- data
}
# Notice that each element of this list contains two additional elements
# ("Monthly payment: $" and $"$), which we want to remove.
all_prices <- lapply(all_prices, function(x) x[grepl("^\\$\\d{1,3},\\d{3}$", x)])
prices <- unlist(all_prices)
# Clean up
prices <-
str_remove_all(prices, "[^0-9]") |>  # Remove non-numeric characters
as.integer()
#--------------------------------------------------------------------------------
all_brands <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".vehicle-name") %>%
html_text2()
all_brands[[i]] <- data
}
brands <- unlist(all_brands)
#-------------------------------------------------------------------------------
all_mileages <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".miles-style") %>%
html_text2()
all_mileages[[i]] <- data
}
str_remove_all(mileages, " kms") |>  # Remove non-numeric characters
str_remove_all( ",") |>  # Remove non-numeric characters
as.integer()
mileages <- unlist(all_mileages)
#-------------------------------------------------------------------------------
all_colors <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".car-info :nth-child(1)") %>%
html_text2()
data <- str_remove_all(data, "\\d{4}")
all_colors[[i]] <- data
}
colors <- unlist(all_colors)
#--------------------------------------------------------------------------------
# Put it all in a data frame
car_df <- tibble(
price = prices,
brands = brands,
mileages = mileages,
colors = colors
)
car_df
#SCRAPING CAR DATA-----------
library(stringr)
library(tidyverse)
library(rvest)
# This is how you get read the HTML into R
url <- "https://www.honeycarsmart.com/index.php/full-inventory"
html <- read_html(url)
#SCRAPING CAR DATA-----------
library(stringr)
library(tidyverse)
library(rvest)
# This is how you get read the HTML into R
url <- "https://www.honeycarsmart.com/index.php/full-inventory"
html <- read_html(url)
#number of pages to scrape
num_pages <- 20
#-------------------------------------------------------------------------------
all_prices <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".results") %>%
html_text2()
all_prices[[i]] <- data
}
# Notice that each element of this list contains two additional elements
# ("Monthly payment: $" and $"$), which we want to remove.
all_prices <- lapply(all_prices, function(x) x[grepl("^\\$\\d{1,3},\\d{3}$", x)])
prices <- unlist(all_prices)
# Clean up
prices <-
str_remove_all(prices, "[^0-9]") |>  # Remove non-numeric characters
as.integer()
#--------------------------------------------------------------------------------
all_brands <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".vehicle-name") %>%
html_text2()
all_brands[[i]] <- data
}
brands <- unlist(all_brands)
#-------------------------------------------------------------------------------
all_mileages <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".miles-style") %>%
html_text2()
all_mileages[[i]] <- data
}
str_remove_all(mileages, " kms") |>  # Remove non-numeric characters
str_remove_all( ",") |>  # Remove non-numeric characters
as.integer()
mileages <- unlist(all_mileages)
#-------------------------------------------------------------------------------
all_colors <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".car-info :nth-child(1)") %>%
html_text2()
data <- str_remove_all(data, "\\d{4}")
all_colors[[i]] <- data
}
colors <- unlist(all_colors)
#--------------------------------------------------------------------------------
# Put it all in a data frame
car_df <- tibble(
price = prices,
brands = brands,
mileages = mileages,
colors = colors
)
car_df
lm(price ~ mileage, data = car_df)
lm(price ~ mileages, data = car_df)
model <- lm(price ~ mileages, data = car_df)
summary(model)
arrange(.data = car_df, mileages)
all_mileages <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".miles-style") %>%
html_text2()
all_mileages[[i]] <- data
}
mileages <- unlist(all_mileages)
str_remove_all(mileages, " kms") |>  # Remove non-numeric characters
str_remove_all( ",") |>  # Remove non-numeric characters
as.integer()
mileages <-
str_remove_all(mileages, " kms") |>  # Remove non-numeric characters
str_remove_all( ",") |>  # Remove non-numeric characters
as.integer()
mileages
## Put it all in a data frame
car_df <- tibble(
price = prices,
brands = brands,
mileages = mileages,
colors = colors
)
arrange(.data = car_df, mileages)
mileages
car_df
arrange(.data = car_df, mileages)
model
str(model)
car_df$mileages
?lm
lm(price ~ mileages, data = car_df)
lm(price ~ brands, data = car_df)
lm(price ~ brands, data = car_df)
arrange(.data = car_df, brands)
print(n = 100)
`print(n = 100)
`print(n = 100)`
`print(n = 100)`
arrange(.data = car_df, brands, mileages)
n = 100
# Linear regression predicting price based on mileage
lm(price ~ mileages, data = car_df)
lm(price ~ brands, data = car_df)
car_df
arrange(.data = car_df, price)
lm(price ~ brands, data = car_df)
write_csv(car_df, file = "car_df.csv")
all_brands <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".vehicle-name") %>%
html_text2()
all_brands[[i]] <- data
}
brands <- unlist(all_brands)
all_brands <- list()
all_years <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".vehicle-name") %>%
html_text2()
years <- str_extract(data, "\\b\\d{4}\\b")  # This captures the year
all_years[[i]] <- years
brands <- str_remove(data, "\\b\\d{4}\\b")  # This removes the year
all_brands[[i]] <- str_trim(brands)  # Trim any extra spaces
brands <- unlist(all_brands)
years <- unlist(all_years)
source("~/GitHub/labs-grp-mathletes/car_bn.R", echo=TRUE)
years <- as.integer(years)
all_brands <- list()
all_years <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".vehicle-name") %>%
html_text2()
# Extract years (4-digit numbers)
years <- str_extract(data, "\\b\\d{4}\\b")  # This captures the year
all_years[[i]] <- years
# Remove the year from the brand names
brands <- str_remove(data, "\\b\\d{4}\\b")  # This removes the year
all_brands[[i]] <- str_trim(brands)  # Trim any extra spaces
}
# Unlist the results
brands <- unlist(all_brands)
years <- unlist(all_years)
# Convert years to integer
years <- as.integer(years)
years
brands
car_df <- tibble(
price = prices,
brands = brands,
mileages = mileages,
colors = colors,
year = years
)
car_df
write_csv(car_df, file = "car_df.csv")
plot <- ggplot(summary_df, aes(x = news_frequency, y = Freq, fill = plastic_reduction_agreement)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = 'Engagement in Plastic Reduction by News Exposure',
x = 'Frequency of Keeping Up with Environmental News',
y = 'Number of Participants',
fill = 'Agreement on Plastic Reduction') +
theme_minimal()
library(ggplot2)
# Create a bar plot to visualize the relationship
plot <- ggplot(summary_df, aes(x = news_frequency, y = Freq, fill = plastic_reduction_agreement)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = 'Engagement in Plastic Reduction by News Exposure',
x = 'Frequency of Keeping Up with Environmental News',
y = 'Number of Participants',
fill = 'Agreement on Plastic Reduction') +
theme_minimal()
install.packages("readxl")
library(readxl)
library(readxl)
download.file("https://ubdedubn-my.sharepoint.com/:x:/g/personal/23b9016_ubd_edu_bn/EY9-zMHUzG9JsKW8BuFf4poBj7D9lpzUHA8DHJR2-Ylosw?rtime=5AaSLFby3Eg", mode = "wb")
library(readxl)
car_df <- read_excel("car_df.xlsx")
View(car_df)
readxl(car_df)
read.csv(car_df)
#---------------------------------------------------------------------
#
read_excel("car_df.xlsx")
car_df <- read_excel("car_df.xlsx")
write.csv(car_df, "car_df.csv")
car_df
car <- write.csv(car_df, "car_df.csv")
car
car_df
git status
git status
#1) SCRAPING CAR DATA-----------------------------------------------------------
library(stringr)
library(tidyverse)
library(rvest)
# This is how you get read the HTML into R
url <- "https://www.honeycarsmart.com/index.php/full-inventory"
html <- read_html(url)
#number of pages to scrape
num_pages <- 20
#-------------------------------------------------------------------------------
all_prices <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".results") %>%
html_text2()
all_prices[[i]] <- data
}
# Notice that each element of this list contains two additional elements
# ("Monthly payment: $" and $"$), which we want to remove.
all_prices <- lapply(all_prices, function(x) x[grepl("^\\$\\d{1,3},\\d{3}$", x)])
prices <- unlist(all_prices)
# Clean up
prices <-
str_remove_all(prices, "[^0-9]") |>  # Remove non-numeric characters
as.integer()
#-------------------------------------------------------------------------------
# Initialize lists for brands and years
all_brands <- list()
all_years <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".vehicle-name") %>%
html_text2()
# Extract years (4-digit numbers)
years <- str_extract(data, "\\b\\d{4}\\b")  # This captures the year
all_years[[i]] <- years
# Remove the year from the brand names
brands <- str_remove(data, "\\b\\d{4}\\b")  # This removes the year
all_brands[[i]] <- str_trim(brands)  # Trim any extra spaces
}
# Unlist the results
brands <- unlist(all_brands)
years <- unlist(all_years)
# Convert years to integer
years <- as.integer(years)
#-------------------------------------------------------------------------------
all_mileages <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".miles-style") %>%
html_text2()
all_mileages[[i]] <- data
}
mileages <- unlist(all_mileages)
str_remove_all(mileages, " kms") |>  # Remove non-numeric characters
str_remove_all( ",") |>  # Remove non-numeric characters
as.integer()
#-------------------------------------------------------------------------------
all_colors <- list()
for (i in 1:num_pages) {
url <- paste0("https://www.honeycarsmart.com/index.php/full-inventory/page/", i)
page <- read_html(url)
data <- page %>%
html_elements(".car-info :nth-child(1)") %>%
html_text2()
data <- str_remove_all(data, "\\d{4}")
all_colors[[i]] <- data
}
colors <- unlist(all_colors)
#-------------------------------------------------------------------------------
# Put it all in a data frame
car_df <- tibble(
price = prices,
brands = brands,
mileages = mileages,
colors = colors
)
#2) ANALYZE DATA----------------------------------------------------------------
library(readxl)
car_df <- read_excel("car_df.xlsx")
continent <- car_df$CONTINENT
#continent is manually inserted.
continent
lm(prices ~ years, data = car_df)
model_1 <- lm(prices ~ years, data = car_df)
model_1 <- lm(prices ~ years, data = car_df)
#objective 2 -> The lower the mileage, the more expensive the car is.
model_2 <- lm(prices ~ mileages, data = car_df)
#objective 3 -> The origin of the car can influence the price.
model_3 <- lm(prices ~ continent, data = car_df)
library(ggplot2)
ggplot(car_df, aes(x = years, y = prices)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Car Price vs Year",
x = "Year of Car",
y = "Price") +
theme_minimal()
ggplot(car_df, aes(x = mileages, y = prices)) +
geom_point(color = "green") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Car Price vs Mileage",
x = "Mileage",
y = "Price") +
theme_minimal()
# Scatter plot for prices vs. years with regression line
ggplot(car_df, aes(x = years, y = prices)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Car Price vs Year",
x = "Year of Car",
y = "Price") +
theme_minimal()
# Scatter plot for prices vs. mileages with a cleaner x-axis
ggplot(car_df, aes(x = mileages, y = prices)) +
geom_point(color = "green") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Car Price vs Mileage",
x = "Mileage",
y = "Price") +
scale_x_continuous(limits = c(13000, 415000),
breaks = seq(50000, 400000, by = 50000),
labels = scales::comma) +
theme_minimal()
ggplot(car_df, aes(x = years, y = prices)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Car Price vs Year",
x = "Year of Car",
y = "Price") +
theme_minimal()
car_df$mileages <- as.numeric(gsub("[^0-9]", "", car_df$mileages))
model_1 <- lm(prices ~ years, data = car_df)
model_1
# Scatter plot for prices vs. years with regression line
ggplot(car_df, aes(x = years, y = prices)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Car Price vs Year",
x = "Year of Car",
y = "Price") +
theme_minimal()
# Scatter plot for prices vs. years with regression line
ggplot(car_df, aes(x = years, y = prices)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Car Price vs Year",
x = "Year of Car",
y = "Price")
ggplot(car_df, aes(x = years, y = prices)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Car Price vs Year",
x = "Year of Car",
y = "Price") +
theme_minimal()
#Scatter plot for prices vs. years
ggplot(car_df, aes(x = years, y = prices)) +
geom_point(color = "blue") +
geom_smooth(method = "lm",
color = "red",
se = FALSE) +
labs(title = "Car Price vs Year",
x = "Year of Car",
y = "Price")
#Scatter plot for prices vs. years
ggplot(car_df, aes(x = years, y = prices)) +
geom_point(color = "blue") +
geom_smooth(method = "lm",
color = "red",
se = FALSE) +
labs(title = "Car Price vs Year",
x = "Year of Car",
y = "Price") +
theme_minimal()
